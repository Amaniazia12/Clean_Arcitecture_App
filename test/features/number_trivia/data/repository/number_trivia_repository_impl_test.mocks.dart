// Mocks generated by Mockito 5.0.7 from annotations
// in architecture/test/features/number_trivia/data/repository/number_trivia_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:architecture/core/network/network_info.dart' as _i3;
import 'package:architecture/featuers/numberTrivia/data/data_sources/number_trivia_local_data_sources.dart'
    as _i5;
import 'package:architecture/featuers/numberTrivia/data/data_sources/number_trivia_remote_data_sources.dart'
    as _i6;
import 'package:architecture/featuers/numberTrivia/data/models/number_trivia_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeNumberTriviaModel extends _i1.Fake implements _i2.NumberTriviaModel {
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [NumberTriviaLocalDataSources].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaLocalDataSources extends _i1.Mock
    implements _i5.NumberTriviaLocalDataSources {
  MockNumberTriviaLocalDataSources() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.NumberTriviaModel> getLastNumberTrivia() =>
      (super.noSuchMethod(Invocation.method(#getLastNumberTrivia, []),
              returnValue:
                  Future<_i2.NumberTriviaModel>.value(_FakeNumberTriviaModel()))
          as _i4.Future<_i2.NumberTriviaModel>);
  @override
  _i4.Future<void> cashedNumberTrivia(
          _i2.NumberTriviaModel? triviaModelCashed) =>
      (super.noSuchMethod(
          Invocation.method(#cashedNumberTrivia, [triviaModelCashed]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [NumberTriviaRemotDataSources].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaRemotDataSources extends _i1.Mock
    implements _i6.NumberTriviaRemotDataSources {
  MockNumberTriviaRemotDataSources() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.NumberTriviaModel> getConcreteNumberTrivia(int? number) =>
      (super.noSuchMethod(Invocation.method(#getConcreteNumberTrivia, [number]),
              returnValue:
                  Future<_i2.NumberTriviaModel>.value(_FakeNumberTriviaModel()))
          as _i4.Future<_i2.NumberTriviaModel>);
  @override
  _i4.Future<_i2.NumberTriviaModel> getRandomNumberTrivia() =>
      (super.noSuchMethod(Invocation.method(#getRandomNumberTrivia, []),
              returnValue:
                  Future<_i2.NumberTriviaModel>.value(_FakeNumberTriviaModel()))
          as _i4.Future<_i2.NumberTriviaModel>);
}
